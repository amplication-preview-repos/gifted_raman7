/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Doctor } from "./Doctor";
import { DoctorCountArgs } from "./DoctorCountArgs";
import { DoctorFindManyArgs } from "./DoctorFindManyArgs";
import { DoctorFindUniqueArgs } from "./DoctorFindUniqueArgs";
import { CreateDoctorArgs } from "./CreateDoctorArgs";
import { UpdateDoctorArgs } from "./UpdateDoctorArgs";
import { DeleteDoctorArgs } from "./DeleteDoctorArgs";
import { AppointmentFindManyArgs } from "../../appointment/base/AppointmentFindManyArgs";
import { Appointment } from "../../appointment/base/Appointment";
import { ConversationFindManyArgs } from "../../conversation/base/ConversationFindManyArgs";
import { Conversation } from "../../conversation/base/Conversation";
import { Clinic } from "../../clinic/base/Clinic";
import { DoctorService } from "../doctor.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Doctor)
export class DoctorResolverBase {
  constructor(
    protected readonly service: DoctorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "read",
    possession: "any",
  })
  async _doctorsMeta(
    @graphql.Args() args: DoctorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Doctor])
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "read",
    possession: "any",
  })
  async doctors(@graphql.Args() args: DoctorFindManyArgs): Promise<Doctor[]> {
    return this.service.doctors(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Doctor, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "read",
    possession: "own",
  })
  async doctor(
    @graphql.Args() args: DoctorFindUniqueArgs
  ): Promise<Doctor | null> {
    const result = await this.service.doctor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Doctor)
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "create",
    possession: "any",
  })
  async createDoctor(@graphql.Args() args: CreateDoctorArgs): Promise<Doctor> {
    return await this.service.createDoctor({
      ...args,
      data: {
        ...args.data,

        clinic: args.data.clinic
          ? {
              connect: args.data.clinic,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Doctor)
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "update",
    possession: "any",
  })
  async updateDoctor(
    @graphql.Args() args: UpdateDoctorArgs
  ): Promise<Doctor | null> {
    try {
      return await this.service.updateDoctor({
        ...args,
        data: {
          ...args.data,

          clinic: args.data.clinic
            ? {
                connect: args.data.clinic,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Doctor)
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "delete",
    possession: "any",
  })
  async deleteDoctor(
    @graphql.Args() args: DeleteDoctorArgs
  ): Promise<Doctor | null> {
    try {
      return await this.service.deleteDoctor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Appointment], { name: "appointments" })
  @nestAccessControl.UseRoles({
    resource: "Appointment",
    action: "read",
    possession: "any",
  })
  async findAppointments(
    @graphql.Parent() parent: Doctor,
    @graphql.Args() args: AppointmentFindManyArgs
  ): Promise<Appointment[]> {
    const results = await this.service.findAppointments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Conversation], { name: "conversations" })
  @nestAccessControl.UseRoles({
    resource: "Conversation",
    action: "read",
    possession: "any",
  })
  async findConversations(
    @graphql.Parent() parent: Doctor,
    @graphql.Args() args: ConversationFindManyArgs
  ): Promise<Conversation[]> {
    const results = await this.service.findConversations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Clinic, {
    nullable: true,
    name: "clinic",
  })
  @nestAccessControl.UseRoles({
    resource: "Clinic",
    action: "read",
    possession: "any",
  })
  async getClinic(@graphql.Parent() parent: Doctor): Promise<Clinic | null> {
    const result = await this.service.getClinic(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
