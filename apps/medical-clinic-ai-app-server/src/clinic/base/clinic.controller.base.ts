/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ClinicService } from "../clinic.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ClinicCreateInput } from "./ClinicCreateInput";
import { Clinic } from "./Clinic";
import { ClinicFindManyArgs } from "./ClinicFindManyArgs";
import { ClinicWhereUniqueInput } from "./ClinicWhereUniqueInput";
import { ClinicUpdateInput } from "./ClinicUpdateInput";
import { AppointmentFindManyArgs } from "../../appointment/base/AppointmentFindManyArgs";
import { Appointment } from "../../appointment/base/Appointment";
import { AppointmentWhereUniqueInput } from "../../appointment/base/AppointmentWhereUniqueInput";
import { DoctorFindManyArgs } from "../../doctor/base/DoctorFindManyArgs";
import { Doctor } from "../../doctor/base/Doctor";
import { DoctorWhereUniqueInput } from "../../doctor/base/DoctorWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ClinicControllerBase {
  constructor(
    protected readonly service: ClinicService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Clinic })
  @nestAccessControl.UseRoles({
    resource: "Clinic",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createClinic(@common.Body() data: ClinicCreateInput): Promise<Clinic> {
    return await this.service.createClinic({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        location: true,
        phoneNumber: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Clinic] })
  @ApiNestedQuery(ClinicFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Clinic",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async clinics(@common.Req() request: Request): Promise<Clinic[]> {
    const args = plainToClass(ClinicFindManyArgs, request.query);
    return this.service.clinics({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        location: true,
        phoneNumber: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Clinic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Clinic",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async clinic(
    @common.Param() params: ClinicWhereUniqueInput
  ): Promise<Clinic | null> {
    const result = await this.service.clinic({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        location: true,
        phoneNumber: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Clinic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Clinic",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateClinic(
    @common.Param() params: ClinicWhereUniqueInput,
    @common.Body() data: ClinicUpdateInput
  ): Promise<Clinic | null> {
    try {
      return await this.service.updateClinic({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          location: true,
          phoneNumber: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Clinic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Clinic",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteClinic(
    @common.Param() params: ClinicWhereUniqueInput
  ): Promise<Clinic | null> {
    try {
      return await this.service.deleteClinic({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          location: true,
          phoneNumber: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/appointments")
  @ApiNestedQuery(AppointmentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Appointment",
    action: "read",
    possession: "any",
  })
  async findAppointments(
    @common.Req() request: Request,
    @common.Param() params: ClinicWhereUniqueInput
  ): Promise<Appointment[]> {
    const query = plainToClass(AppointmentFindManyArgs, request.query);
    const results = await this.service.findAppointments(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        appointmentDate: true,
        reasonForVisit: true,

        doctor: {
          select: {
            id: true,
          },
        },

        clinic: {
          select: {
            id: true,
          },
        },

        patient: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/appointments")
  @nestAccessControl.UseRoles({
    resource: "Clinic",
    action: "update",
    possession: "any",
  })
  async connectAppointments(
    @common.Param() params: ClinicWhereUniqueInput,
    @common.Body() body: AppointmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointments: {
        connect: body,
      },
    };
    await this.service.updateClinic({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/appointments")
  @nestAccessControl.UseRoles({
    resource: "Clinic",
    action: "update",
    possession: "any",
  })
  async updateAppointments(
    @common.Param() params: ClinicWhereUniqueInput,
    @common.Body() body: AppointmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointments: {
        set: body,
      },
    };
    await this.service.updateClinic({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/appointments")
  @nestAccessControl.UseRoles({
    resource: "Clinic",
    action: "update",
    possession: "any",
  })
  async disconnectAppointments(
    @common.Param() params: ClinicWhereUniqueInput,
    @common.Body() body: AppointmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointments: {
        disconnect: body,
      },
    };
    await this.service.updateClinic({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/doctors")
  @ApiNestedQuery(DoctorFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "read",
    possession: "any",
  })
  async findDoctors(
    @common.Req() request: Request,
    @common.Param() params: ClinicWhereUniqueInput
  ): Promise<Doctor[]> {
    const query = plainToClass(DoctorFindManyArgs, request.query);
    const results = await this.service.findDoctors(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        fullName: true,
        specialization: true,
        email: true,
        phoneNumber: true,

        clinic: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/doctors")
  @nestAccessControl.UseRoles({
    resource: "Clinic",
    action: "update",
    possession: "any",
  })
  async connectDoctors(
    @common.Param() params: ClinicWhereUniqueInput,
    @common.Body() body: DoctorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      doctors: {
        connect: body,
      },
    };
    await this.service.updateClinic({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/doctors")
  @nestAccessControl.UseRoles({
    resource: "Clinic",
    action: "update",
    possession: "any",
  })
  async updateDoctors(
    @common.Param() params: ClinicWhereUniqueInput,
    @common.Body() body: DoctorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      doctors: {
        set: body,
      },
    };
    await this.service.updateClinic({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/doctors")
  @nestAccessControl.UseRoles({
    resource: "Clinic",
    action: "update",
    possession: "any",
  })
  async disconnectDoctors(
    @common.Param() params: ClinicWhereUniqueInput,
    @common.Body() body: DoctorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      doctors: {
        disconnect: body,
      },
    };
    await this.service.updateClinic({
      where: params,
      data,
      select: { id: true },
    });
  }
}
